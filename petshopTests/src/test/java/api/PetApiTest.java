/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import java.io.File;

import io.qameta.allure.Flaky;
import io.restassured.internal.common.assertion.Assertion;
import io.restassured.response.Response;
import io.restassured.response.ResponseBody;
import jdk.jfr.Enabled;
import model.ModelApiResponse;
import model.Pet;
import invoker.ApiClient;
import api.PetApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.*;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.*;

import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import io.qameta.allure.restassured.AllureRestAssured;
import static invoker.JacksonObjectMapper.jackson;
import static java.lang.Thread.sleep;

/**
 * API tests for PetApi
 */
//@Disabled
@Tag("PetApi")
public class PetApiTest {

    private PetApi api;

    @BeforeEach
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .addFilter(new AllureRestAssured())
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(jackson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://petstore.swagger.io/v2"))).pet();
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterAddPet() {
        Pet pet = new Pet().name("Pesia").photoUrls(Collections.singletonList("http://google.com"));
        Response response = api.addPet()
                .body(pet).execute(r -> r);
        response.then().assertThat().statusCode(200);

        Pet expectedPet = pet.category(null).tags(new ArrayList<>()).status(null);
        Pet responseBody = response.getBody().as(Pet.class);
        Assertions.assertThat(responseBody)
                .usingRecursiveComparison()
                .ignoringFields("id")
                .isEqualTo(expectedPet);
    }


    /**
     * successful operation
     */
    @Flaky
    @RepeatedTest(10)
    public void shouldSee200AfterGetPetById() throws InterruptedException {
        Pet pet = new Pet().name("Pesia").photoUrls(Collections.singletonList("http://google.com"));
        Long existingPetId = api.addPet().body(pet).execute(r -> r.getBody().as(Pet.class).getId());

        Response response = api.getPetById()
                .petIdPath(existingPetId).execute(r -> r);
        response.then().assertThat().statusCode(200);


        Pet expectedPet = pet.category(null).tags(new ArrayList<>()).status(null);
        Pet responseBody = response.getBody().as(Pet.class);
        Assertions.assertThat(responseBody)
                .usingRecursiveComparison()
                .ignoringFields("id")
                .isEqualTo(expectedPet);
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterUpdatePet() {
        Pet pet = new Pet().name("Pesia").photoUrls(Collections.singletonList("http://google.com"));
        api.addPet().body(pet).execute(r -> r.getBody().as(Pet.class));

        pet.setName("nePesia");

        Response response = api.updatePet()
                .body(pet).execute(r -> r);
        response.then().assertThat().statusCode(200);


        Pet expectedPet = pet.category(null).tags(new ArrayList<>()).status(null);
        Pet responseBody = response.getBody().as(Pet.class);
        Assertions.assertThat(responseBody)
                .usingRecursiveComparison()
                .ignoringFields("id")
                .isEqualTo(expectedPet);
    }

    /**
     * Invalid input
     */
    @Disabled
    @Test
    public void shouldSee405AfterAddPet() {
        Pet pet = null;
        api.addPet()
                .body(pet).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid pet value
     */
    @Disabled
    @Test
    public void shouldSee400AfterDeletePet() {
        Long petId = null;
        String apiKey = null;
        api.deletePet()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Disabled
    @Test
    public void shouldSee200AfterFindPetsByStatus() {
        List<String> status = null;
        api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid status value
     */
    @Disabled
    @Test
    public void shouldSee400AfterFindPetsByStatus() {
        List<String> status = null;
        api.findPetsByStatus()
                .statusQuery(status).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Disabled
    @Test
    public void shouldSee200AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid tag value
     */
    @Disabled
    @Test
    public void shouldSee400AfterFindPetsByTags() {
        List<String> tags = null;
        api.findPetsByTags()
                .tagsQuery(tags).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid ID supplied
     */
    @Disabled
    @Test
    public void shouldSee400AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Disabled
    @Test
    public void shouldSee404AfterGetPetById() {
        Long petId = null;
        api.getPetById()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid ID supplied
     */
    @Disabled
    @Test
    public void shouldSee400AfterUpdatePet() {
        Pet pet = null;
        api.updatePet()
                .body(pet).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Pet not found
     */
    @Disabled
    @Test
    public void shouldSee404AfterUpdatePet() {
        Pet pet = null;
        api.updatePet()
                .body(pet).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Validation exception
     */
    @Disabled
    @Test
    public void shouldSee405AfterUpdatePet() {
        Pet pet = null;
        api.updatePet()
                .body(pet).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Invalid input
     */
    @Disabled
    @Test
    public void shouldSee405AfterUpdatePetWithForm() {
        Long petId = null;
        String name = null;
        String status = null;
        api.updatePetWithForm()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * successful operation
     */
    @Disabled
    @Test
    public void shouldSee200AfterUploadFile() {
        Long petId = null;
        String additionalMetadata = null;
        File file = null;
        api.uploadFile()
                .petIdPath(petId).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}